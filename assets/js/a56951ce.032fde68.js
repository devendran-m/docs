"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5175],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,h=m["".concat(c,".").concat(d)]||m[d]||p[d]||s;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},924:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=n(3117),a=n(102),s=(n(7294),n(3905)),o=["components"],i={},c="A Basic Smart Contract in Rust",l={unversionedId:"dapp-dev-guide/writing-contracts/rust",id:"dapp-dev-guide/writing-contracts/rust",title:"A Basic Smart Contract in Rust",description:"This section explains step by step how to write a new smart contract on Casper. Start with main.rs from the previous section.",source:"@site/source/docs/casper/dapp-dev-guide/writing-contracts/rust.md",sourceDirName:"dapp-dev-guide/writing-contracts",slug:"/dapp-dev-guide/writing-contracts/rust",permalink:"/dapp-dev-guide/writing-contracts/rust",editUrl:"https://github.com/casper-network/docs/tree/main/source/docs/casper/dapp-dev-guide/writing-contracts/rust.md",tags:[],version:"current",frontMatter:{},sidebar:"dapp-dev-guide",previous:{title:"Getting Started with Rust",permalink:"/dapp-dev-guide/getting-started"},next:{title:"AssemblyScript",permalink:"/dapp-dev-guide/writing-contracts/assembly-script"}},u={},p=[{value:"A Basic Smart Contract in Rust",id:"a-basic-smart-contract-in-rust",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Storage",id:"storage",level:2},{value:"Final Smart Contract",id:"final-smart-contract",level:2},{value:"Using Error Codes",id:"using-error-codes",level:2},{value:"Tests",id:"tests",level:3},{value:"WASM File Size",id:"wasm-file-size",level:3}],m={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"a-basic-smart-contract-in-rust"},"A Basic Smart Contract in Rust"),(0,s.kt)("p",null,"This section explains step by step how to write a new smart contract on Casper. Start with ",(0,s.kt)("inlineCode",{parentName:"p"},"main.rs")," from the previous section."),(0,s.kt)("h2",{id:"a-basic-smart-contract-in-rust"},"A Basic Smart Contract in Rust"),(0,s.kt)("p",null,"The Casper VM executes a smart contract by calling the ",(0,s.kt)("inlineCode",{parentName:"p"},"call")," function specified in the contract. If the function is missing, the smart contract is not valid. The simplest possible example is an empty ",(0,s.kt)("inlineCode",{parentName:"p"},"call")," function."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'#[no_mangle]\npub extern "C" fn call() {}\n')),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"#[no_mangle]")," attribute prevents the compiler from changing (mangling) the function name when converting to the binary format of Wasm. Without it, the VM exits with the error message: ",(0,s.kt)("inlineCode",{parentName:"p"},"Module doesn't have export call"),"."),(0,s.kt)("h2",{id:"arguments"},"Arguments"),(0,s.kt)("p",null,"It's possible to pass arguments to smart contracts. To leverage this feature, use ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/casper-contract/latest/casper_contract/contract_api/runtime/fn.get_named_arg.html"},"runtime::get_named_arg"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'use casperlabs_contract::contract_api::runtime;\n\n#[no_mangle]\npub extern "C" fn call() {\n    let value: String = runtime::get_named_arg("value");\n}\n')),(0,s.kt)("h2",{id:"storage"},"Storage"),(0,s.kt)("p",null,"Saving and reading values to and from the blockchain is a manual process in Casper. It requires more code to be written, but also provides a lot of flexibility. The storage system works similarly to a file system in an operating system. Let's say we have a string ",(0,s.kt)("inlineCode",{parentName:"p"},'"Hello Casper!"')," that needs to be saved. To do this, use the text editor, create a new file, paste the string in and save it under a name in some directory. The pattern is similar on the Casper blockchain. First you have to save your value to the memory using ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/casper-contract/latest/casper_contract/contract_api/storage/fn.new_uref.html"},"storage::new_uref"),". This returns a reference to the memory object that holds the ",(0,s.kt)("inlineCode",{parentName:"p"},'"Hello Casper!"')," value. You could use this reference to update the value to something else. It's like a file. Secondly you have to save the reference under a human-readable string using ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/casper-contract/latest/casper_contract/contract_api/runtime/fn.put_key.html"},"runtime::put_key"),". It's like giving a name to the file. The following function implements this scenario:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'const KEY: &str = "special_value";\n\nfn store(value: String) {\n    // Store `value` under a new unforgeable reference.\n    let value_ref = storage::new_uref(value);\n\n    // Wrap the unforgeable reference in a `Key`.\n    let value_key: Key = value_ref.into();\n\n    // Store this key under the name "special_value" in context-local storage.\n    runtime::put_key(KEY, value_key);\n}\n')),(0,s.kt)("p",null,"After this function is executed, the context (Account or Smart Contract) will have the content of the ",(0,s.kt)("inlineCode",{parentName:"p"},"value")," stored under ",(0,s.kt)("inlineCode",{parentName:"p"},"KEY")," in its named keys space. The named keys space is a key-value storage that every context has. It's like a home directory."),(0,s.kt)("h2",{id:"final-smart-contract"},"Final Smart Contract"),(0,s.kt)("p",null,"The code below is the simple contract generated by ",(0,s.kt)("a",{parentName:"p",href:"https://crates.io/crates/cargo-casper"},"cargo-casper")," (found in ",(0,s.kt)("inlineCode",{parentName:"p"},"contract/src/main.rs")," of a project created by the tool). It reads an argument and stores it in the memory under a key named ",(0,s.kt)("inlineCode",{parentName:"p"},'"special_value"'),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(\n    not(target_arch = "wasm32"),\n    crate_type = "target arch should be wasm32"\n)]\n#![no_main]\n\nuse casperlabs_contract::{\n    contract_api::{runtime, storage},\n};\nuse casperlabs_types::{Key, URef};\n\nconst KEY: &str = "special_value";\nconst ARG_MESSAGE: &str = "message";\n\nfn store(value: String) {\n    // Store `value` under a new unforgeable reference.\n    let value_ref: URef = storage::new_uref(value);\n\n    // Wrap the unforgeable reference in a value of type `Key`.\n    let value_key: Key = value_ref.into();\n\n    // Store this key under the name "special_value" in context-local storage.\n    runtime::put_key(KEY, value_key);\n}\n\n// All session code must have a `call` entrypoint.\n#[no_mangle]\npub extern "C" fn call() {\n    // Get the optional first argument supplied to the argument.\n    let value: String = runtime::get_named_arg(ARG_MESSAGE);\n    store(value);\n}\n')),(0,s.kt)("h2",{id:"using-error-codes"},"Using Error Codes"),(0,s.kt)("p",null,"The Casper VM supports error codes in smart contracts. A contract can stop execution and exit with a given error via the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/casper-contract"},"runtime::revert")," function:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'use casperlabs_contract::contract_api::runtime;\nuse casperlabs_types::ApiError;\n\n#[no_mangle]\npub extern "C" fn call() {\n    runtime::revert(ApiError::PermissionDenied)\n}\n')),(0,s.kt)("p",null,"When a contract exits with an error code, the exit code is visible in the Block Explorer."),(0,s.kt)("h3",{id:"tests"},"Tests"),(0,s.kt)("p",null,"Refer to the ",(0,s.kt)("a",{parentName:"p",href:"/dapp-dev-guide/testing"},"Testing Contract")," section to view more details about the smart contract testing procedure."),(0,s.kt)("h3",{id:"wasm-file-size"},"WASM File Size"),(0,s.kt)("p",null,"We encourage shrinking the WASM file size as much as possible. Smaller deploys cost less and save the network bandwidth. We recommend reading ",(0,s.kt)("a",{parentName:"p",href:"https://rustwasm.github.io/docs/book/reference/code-size.html"},"Shrinking .wasm Code Size")," chapter of ",(0,s.kt)("a",{parentName:"p",href:"https://rustwasm.github.io/docs/book/"},"The Rust Wasm Book"),"."))}d.isMDXComponent=!0}}]);