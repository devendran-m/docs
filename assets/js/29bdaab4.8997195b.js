"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6727],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,k=p["".concat(s,".").concat(h)]||p[h]||d[h]||o;return n?r.createElement(k,i(i({ref:t},u),{},{components:n})):r.createElement(k,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3745:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],l={},s="Block Structure",c={unversionedId:"design/block-structure",id:"design/block-structure",title:"Block Structure",description:"block-structure-head}",source:"@site/source/docs/casper/design/block-structure.md",sourceDirName:"design",slug:"/design/block-structure",permalink:"/design/block-structure",editUrl:"https://github.com/casper-network/docs/tree/main/source/docs/casper/design/block-structure.md",tags:[],version:"current",frontMatter:{},sidebar:"design",previous:{title:"Accounts",permalink:"/design/accounts"},next:{title:"Unforgeable Reference (URef)",permalink:"/design/uref"}},u={},d=[{value:"Introduction",id:"block-structure-intro",level:2},{value:"Data fields",id:"block-structure-data",level:2},{value:"<code>block_hash</code>",id:"block_hash",level:3},{value:"Header",id:"header",level:3},{value:"Body",id:"body",level:3}],p={toc:d};function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"block-structure-head"},"Block Structure"),(0,o.kt)("h2",{id:"block-structure-intro"},"Introduction"),(0,o.kt)("p",null,"A ",(0,o.kt)("em",{parentName:"p"},"block")," is the primary data structure by which network nodes communicate information about the state of the Casper Network. We briefly describe here the format of this data structure."),(0,o.kt)("h2",{id:"block-structure-data"},"Data fields"),(0,o.kt)("p",null,"A block consists of the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a ",(0,o.kt)("inlineCode",{parentName:"li"},"block_hash")),(0,o.kt)("li",{parentName:"ul"},"a header"),(0,o.kt)("li",{parentName:"ul"},"a body")),(0,o.kt)("p",null,"Each of these fields is detailed in the subsequent sections."),(0,o.kt)("h3",{id:"block_hash"},(0,o.kt)("inlineCode",{parentName:"h3"},"block_hash")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"block_hash")," is the ",(0,o.kt)("inlineCode",{parentName:"p"},"blake2b256")," hash of the header."),(0,o.kt)("h3",{id:"header"},"Header"),(0,o.kt)("p",null,"The block header contains the following fields:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"parent_hashes"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"a list of ",(0,o.kt)("inlineCode",{parentName:"li"},"block_hash"),"es giving the parents of the block"))),(0,o.kt)("li",{parentName:"ul"},"justifications",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"a list of ",(0,o.kt)("inlineCode",{parentName:"li"},"block_hash"),"es giving the justifications of the block (see consensus description in part A for more details)"))),(0,o.kt)("li",{parentName:"ul"},"a summary of the global state, including",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"the ",(0,o.kt)("a",{parentName:"li",href:"/design/global-state#global-state-trie"},"root hash of the global state trie")," before executing the deploys in this block (",(0,o.kt)("inlineCode",{parentName:"li"},"pre_state_hash"),")"),(0,o.kt)("li",{parentName:"ul"},"the root hash of the global state trie after executing the deploys in this block (",(0,o.kt)("inlineCode",{parentName:"li"},"post_state_hash"),")"),(0,o.kt)("li",{parentName:"ul"},"the list of currently bonded validators, and their stakes"))),(0,o.kt)("li",{parentName:"ul"},"the ",(0,o.kt)("inlineCode",{parentName:"li"},"blake2b256")," hash of the body of the block"),(0,o.kt)("li",{parentName:"ul"},"the time the block was created"),(0,o.kt)("li",{parentName:"ul"},"the protocol version the block was executed with"),(0,o.kt)("li",{parentName:"ul"},"the number of deploys in the block"),(0,o.kt)("li",{parentName:"ul"},"the human-readable name corresponding to this instance of the Casper Network (",(0,o.kt)("inlineCode",{parentName:"li"},"chain_id"),")"),(0,o.kt)("li",{parentName:"ul"},"an indicator for whether this message is intended as a valid block or merely a ",(0,o.kt)("em",{parentName:"li"},"ballot")," (see consensus description in part A for more details)")),(0,o.kt)("h3",{id:"body"},"Body"),(0,o.kt)("p",null,"The block body contains an ",(0,o.kt)("strong",{parentName:"p"},"ordered")," list of ",(0,o.kt)("inlineCode",{parentName:"p"},"DeployHashes")," which refer to deploys, and an ",(0,o.kt)("strong",{parentName:"p"},"ordered")," list of ",(0,o.kt)("inlineCode",{parentName:"p"},"DeployHashes")," for native transfers (which are specialized deploys that only transfer token between accounts). All deploys, including a specialization such as native transfer, can be broadly categorized as some unit of work that, when executed and committed, affect change to global state ",(0,o.kt)("a",{parentName:"p",href:"/design/global-state#global-state-intro"},"Global State"),". It should be noted that a valid block may contain no deploys and / or native transfers."),(0,o.kt)("p",null,"The block body also contains the public key of the validator that proposed the block."),(0,o.kt)("p",null,"Refer to the ",(0,o.kt)("a",{parentName:"p",href:"/design/serialization-standard"},"Deploy Serialization Standard")," for additional information on deploys and how they are serialized. Refer to ",(0,o.kt)("a",{parentName:"p",href:"/design/serialization-standard"},"Deploy Serialization Standard")," for how blocks are serialized."))}h.isMDXComponent=!0}}]);